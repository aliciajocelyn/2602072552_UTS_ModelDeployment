# -*- coding: utf-8 -*-
"""2602072552_PredictionOOP

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gardDTrsoBDrevpy4sAQOhFUG6TCMFrA
"""

### 2602072552_Alicia Jocelyn Siahaya_UTS_ModelDeployment
### OOP PREDICTION CODE

import streamlit as st
import joblib
import numpy as np
import pandas as pd

# Load machine learning model and encode
model = joblib.load('XGB_model.pkl')
gender_encode = joblib.load('gender_encode.pkl')
geography_encode = joblib.load('geography_encode.pkl')
robust_scaler = joblib.load('robust_scaler.pkl')
standard_scaler = joblib.load('standard_scaler.pkl')

def main():
  st.title('Customer Churn Model Deployment')

  creditScore = st.number_input('CreditScore', 0, 1000)
  geo = st.radio('Geography', ['France', 'Spain', 'Germany'])
  gender = st.radio('Gender', ['Male', 'Female'])
  age = st.number_input('Age', 0, 100)
  tenure = st.number_input('Tenure (in years)', 0, 100)
  balance = st.number_input('Balance', 0, 1000000000)
  numOfProduct = st.number_input('Number of Products', 1, 4)
  hasCreditCard = st.radio('Do you have credit card?', ['Yes', 'No'])
  isActiveMember = st.radio("Active member?", ['Yes', 'No'])
  estimatedSalary = st.number_input("Estimated Salary", 0, 1000000000)

  hasCreditCard = 1 if hasCreditCard == 'Yes' else 0
  isActiveMember = 1 if isActiveMember == 'Yes' else 0

  data = {'Credit Score': int(creditScore), 'Geography': geo, 'Gender': gender, 'Age': int(age), 'Tenure': int(tenure),
          'Balance': int(balance), 'NumberOfProducts': numOfProduct, 'Has Credit Card': hasCreditCard,
          'Is Active Member': isActiveMember, 'Estimated Salary': int(estimatedSalary)}

  df = pd.DataFrame([list(data.values())], columns = ['CreditScore', 'Geography', 'Gender', 'Age',
                                                      'Tenure', 'Balance', 'NumOfProducts', 'HasCrCard',
                                                      'IsActiveMember', 'EstimatedSalary'])

  ## ENCODING ##
  df = df.replace(gender_encode)
  df = df.replace(geography_encode)

  ## SCALING ##
  df[['CreditScore', 'Age']] = robust_scaler.transform(df[['CreditScore', 'Age']])
  df[['Tenure', 'Balance', 'EstimatedSalary']] = standard_scaler.transform(df[['Tenure', 'Balance', 'EstimatedSalary']])

  if st.button("Make Prediction"):
    features = df
    result = make_prediction(features)
    st.success(f'The prediction is: {result}')

def make_prediction(features):
  input_array = np.array(features).reshape(1, -1)
  prediction = model.predict(input_array)
  return prediction[0]

if __name__ == '__main__':
  main()